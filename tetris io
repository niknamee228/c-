#include "windows.h" 
using namespace std;
#include <iostream>
#include <stdio.h>
#include<conio.h>
char** getMatrix(int size_x, int size_y) {
    char** qwe = new char* [size_x];
    for (int i = 0; i < size_x; i++) {
        qwe[i] = new char[size_y];
        for (int j = 0; j < size_y; j++) {
            qwe[i][j] = '*' + '*';
        }
    }
    return qwe;
}
void printqwe(char** qwe, int size_x, int size_y) {
    for (int i = 0; i < size_x; i++) {
        for (int j = 0; size_y; j++) {
            cout << qwe[i][j] << " ";
        }
        cout << endl;
    }
}
struct Figure {
    int id = 1;
    char fig[4][4];

};


char** poka(char** array, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; j++) {
            if (j > 0)
                array[i][j] = ' ';
            array[i][j] = '*';
        }
    }
    return array;
}
void figure(char** array, int size) {
    for (int i = 0; i < size; i++) {
        for (int j = 0; j < size; i++) {
            cout << array[i][j] << " ";
                
        }
        cout << endl;
    }
}

void RotateMatrix(char fig[4][4], int angle) {
    char newFig[4][4];
    switch (angle) {
    case 0:
        for (int i = 0; i < 4; i++) {
            for (int j = 0; i < 4; i++) {
                newFig[i][j] = fig[i][j];
            }
        }
        break;

    case 1:
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                newFig[4 - 1 - i][4 - 1 - j] = fig[i][j];
            }
        }
        break;

    case 2:
        for (int i = 0; i < 4; i++) {
            for (int j = 0; j < 4; j++) {
                newFig[4 - 1 - j][i] = fig[i][j];
            }
        }
        break;

    }


    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            fig[i][j] = newFig[i][j];
        }
    }

}


int main()
{
    char** qwe = getMatrix(4, 4);
    char** fig = poka(qwe, 4);
    printqwe(fig, 4, 4);

    char figure1[4][4] =
    {
    ('*','*','*','*'),
    (' ',' ',' ',' '),
    (' ',' ',' ',' '),
    (' ',' ',' ',' '),
    };
    char figure2[4][4] =
    {
    (' ',' ',' ',' '),
    (' ',' ',' ',' '),
    (' ',' *','* ',' '),
    ('* ','* ',' ',' '),
    };
    char figure3[4][4] =
    {
    ('*',' ',' ',' '),
    ('*','* ','* ',' '),
    (' ','  ',' ',' '),
    (' ',' ',' ',' '),
    };

    char figure4[4][4] =
    {
    (' ',' ',' ',' '),
    (' ',' ',' ',' '),
    (' ','* ',' ',' '),
    ('*','* ','* ',' '),
    };
    char figure5[4][4] =
    {
    (' ',' ',' ',' *'),
    (' ',' *','*','*'),
    (' ','  ',' ',' '),
    (' ',' ',' ',' '),
    };
    char figure6[4][4] =
    {
    (' ',' ',' ',' '),
    (' ',' ',' ',' '),
    (' ','*','*',' '),
    (' ',' ','* ','* '),
    };
    char figure7[4][4] =
    {
    (' ',' ',' ',' '),
    (' ',' ',' ',' '),
    (' ',' ','*','*'),
    (' ',' ','*','* '),
    };

    {
        while (true) {
            Sleep(200);
            int i = 4;
            int rotationAngle = 0;
            int size = 4;
            int rotate = 0;
            int figure = 4;
            switch (true){
            case 0:
                if (_kbhit()) {
                    char ch = _getch();
                    if (ch == 'z') {
                        rotationAngle = (rotationAngle + 1) % 5;
                    }
                }
                RotateMatrix(figure1, rotationAngle);
                figure(figure1, size);
                Sleep(200);
                system("cls");
                i--;
                break;
            case 1:

                if (_kbhit()) {
                    char ch = _getch();
                    if (ch == 'z') {
                        rotationAngle = (rotationAngle + 1) % 5;
                    }
                }

                RotateMatrix(figure2, rotationAngle);
                figure(figure2, size);
                Sleep(200);
                system("cls");
                i--;
                break;
            case 2:

                if (_kbhit()) {
                    char ch = _getch();
                    if (ch == 'z') {
                        rotationAngle = (rotationAngle + 1) % 5;
                    }
                }

                RotateMatrix(figure3, rotationAngle);
                figure(figure3, size);
                Sleep(200);
                system("cls");
                i--;
                break;
            case 3:

                if (_kbhit()) {
                    char ch = _getch();
                    if (ch == 'z') {
                        rotationAngle = (rotationAngle + 1) % 5;
                    }
                }

                RotateMatrix(figure4, rotationAngle);
                figure(figure4, size);
                Sleep(200);
                system("cls");
                i--;
                break;
            case 4:

                if (_kbhit()) {
                    char ch = _getch();
                    if (ch == 'z') {
                        rotationAngle = (rotationAngle + 1) % 5;
                    }
                }

                RotateMatrix(figure5, rotationAngle);
                figure(figure5, size);
                Sleep(200);
                system("cls");
                i--;
                break;
            case 5:

                if (_kbhit()) {
                    char ch = _getch();
                    if (ch == 'z') {
                        rotationAngle = (rotationAngle + 1) % 5;
                    }
                }

                RotateMatrix(figure6, rotationAngle);
                figure(figure6, size);
                Sleep(200);
                system("cls");
                i--;
                break;
            case 6:

                if (_kbhit()) {
                    char ch = _getch();
                    if (ch == 'z') {
                        rotationAngle = (rotationAngle + 1) % 5;
                    }
                }

                RotateMatrix(figure7, rotationAngle);
                figure(figure7, size);
                Sleep(200);
                system("cls");
                i--;
                break;

            }
        }
    }
}
    








