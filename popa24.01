#include <iostream>
#include "windows.h" 
using namespace std;
char** getMatrix(int size_x, int size_y) {
	char** qwe = new char* [size_x];
	for (int i = 0; i < size_x; i++) {
		qwe[i] = new char[size_y];
		for (int j = 0; j < size_y; j++) {
			qwe[i][j] = '*', '*';
		}
	}
	return qwe;
}
	void printqwe(char** qwe, int size_x, int size_y) {
		for (int i = 0; i < size_x; i++) {
			for (int j = 0; size_y; j++) {
				cout << qwe[i][j] << " ";
			}
			cout << endl;
		}
	}
	struct I {
		int id = 1;
		char fig[4][4];

	};
	struct C {
		int id = 2;
		char fig[4][4];

	};

	char** poka(char** array, int size) {
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; j++) {
				if (j > 0)
					array[i][j] = ' ';
				array[i][j] = '*';
			}
		}
		return array;
	}
	void figure(char** array, int size) {
		for (int i = 0; i < size; i++) {
			for (int j = 0; j < size; i++) {
				if (j > 0)
					array[i][j] = ' ';
				array[i][j] = '*';
			}
		}
	}
	
	void RotateMatrix(char fig[4][4], int angle) {
		char newFig[4][4];
		switch (angle) {
		case 0:
			for (int i = 0; i < 4; i++) {
				for (int j = 0; i < 4; i++) {
					newFig[i][j] = fig[i][j];
				}
			}
			break;

		case 2:
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					newFig[4 - 1 - i][4 - 1 - j] = fig[i][j];
				}
			}
			break;

		case 3:
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 4; j++) {
					newFig[4 - 1 - j][i] = fig[i][j];
				}
			}
			break;

		}


		for (int i = 0; i < 4; i++) {
			for (int j = 0; j < 4; j++) {
				fig[i][j] = newFig[i][j];
			}
		}

	}

	
	int main()
	{
		char** qwe = getMatrix(5, 5);
		char** fig = poka(qwe, 4);
		printqwe(fig, 3, 3);

		char figure[4][4] =
		{
		('*','*','*','*'),
		(' ',' ',' ',' '),
		(' ',' ',' ',' '),
		(' ',' ',' ',' '),
		};
		char figure[4][4] =
		{
		(' ',' ',' ',' '),
		(' ',' ',' ',' '),
		(' ',' *','* ',' '),
		('* ','* ',' ',' '),
		};
		char figure[4][4] =
		{
		('*',' ',' ',' '),
		('*','* ','* ',' '),
		(' ','  ',' ',' '),
		(' ',' ',' ',' '),
		};

		char figure[4][4] =
		{
		(' ',' ',' ',' '),
		(' ',' ',' ',' '),
		(' ','* ',' ',' '),
		('*','* ','* ',' '),
		};
		char figure[4][4] =
		{
		(' ',' ',' ',' *'),
		(' ',' *','*','*'),
		(' ','  ',' ',' '),
		(' ',' ',' ',' '),
		};
		char figure[4][4] =
		{
		(' ',' ',' ',' '),
		(' ',' ',' ',' '),
		(' ','*','*',' '),
		(' ',' ','* ','* '),
		};
		char figure[4][4] =
		{
		(' ',' ',' ',' '),
		(' ',' ',' ',' '),
		(' ',' ','*','*'),
		(' ',' ','*','* '),
		};
		while (true) {
			switch (rand() % 5) {
			case 0:
				break;
			}
		case 1:
			RotateMatrix(figure1, c);
			figure(figure1, size);
			Sleep(200);
			system("cls");
			break;

		case 2:
			RotateMatrix(figure2, c);
			figure(figure2, size);
			Sleep(200);
			system("cls");
			break;
		case 3:
			RotateMatrix(figure3, c);
			figure(figure3, size);
			Sleep(200);
			system("cls");
			break;
		case 4:
			RotateMatrix(figure4, c);
			figure(figure4, size);
			Sleep(200);
			system("cls");
			break;
		case 5:
			RotateMatrix(figure5, c);
			figure(figure5, size);
			Sleep(200);
			system("cls");
			break;
		case 6:
			RotateMatrix(figure6, c);
			figure(figure6, size);
			Sleep(200);
			system("cls");
			break;
		case 7:
			RotateMatrix(figure7, c);
			figure(figure7, size);
			Sleep(200);
			system("cls");
					break;
		}
	}
	
	
