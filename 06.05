#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <stdexcept>

using namespace std;


const uint16_t cp1251_to_unicode[128] = {
    0x0402, 0x0403, 0x201A, 0x0453, 0x201E, 0x2026, 0x2020, 0x2021,
    0x20AC, 0x2030, 0x0409, 0x2039, 0x040A, 0x040C, 0x040B, 0x040F,
    0x0452, 0x2018, 0x2019, 0x201C, 0x201D, 0x2022, 0x2013, 0x2014,
    0x0000, 0x2122, 0x0459, 0x203A, 0x045A, 0x045C, 0x045B, 0x045F,
    0x00A0, 0x040E, 0x045E, 0x0408, 0x00A4, 0x0490, 0x00A6, 0x00A7,
    0x0401, 0x00A9, 0x0404, 0x00AB, 0x00AC, 0x00AD, 0x00AE, 0x0407,
    0x00B0, 0x00B1, 0x0406, 0x0456, 0x0491, 0x00B5, 0x00B6, 0x00B7,
    0x0451, 0x2116, 0x0454, 0x00BB, 0x0458, 0x0405, 0x0455, 0x0457,
    0x0410, 0x0411, 0x0412, 0x0413, 0x0414, 0x0415, 0x0416, 0x0417,
    0x0418, 0x0419, 0x041A, 0x041B, 0x041C, 0x041D, 0x041E, 0x041F,
    0x0420, 0x0421, 0x0422, 0x0423, 0x0424, 0x0425, 0x0426, 0x0427,
    0x0428, 0x0429, 0x042A, 0x042B, 0x042C, 0x042D, 0x042E, 0x042F,
    0x0430, 0x0431, 0x0432, 0x0433, 0x0434, 0x0435, 0x0436, 0x0437,
    0x0438, 0x0439, 0x043A, 0x043B, 0x043C, 0x043D, 0x043E, 0x043F,
    0x0440, 0x0441, 0x0442, 0x0443, 0x0444, 0x0445, 0x0446, 0x0447,
    0x0448, 0x0449, 0x044A, 0x044B, 0x044C, 0x044D, 0x044E, 0x044F
};


vector<uint8_t> unicode_to_utf8(uint16_t unicode) {
    vector<uint8_t> result;
    
    if (unicode <= 0x7F) {
        result.push_back(static_cast<uint8_t>(unicode));
    }
    else if (unicode <= 0x7FF) {
        result.push_back(static_cast<uint8_t>(0xC0 | (unicode >> 6)));
        result.push_back(static_cast<uint8_t>(0x80 | (unicode & 0x3F)));
    }
    else {
        result.push_back(static_cast<uint8_t>(0xE0 | (unicode >> 12)));
        result.push_back(static_cast<uint8_t>(0x80 | ((unicode >> 6) & 0x3F)));
        result.push_back(static_cast<uint8_t>(0x80 | (unicode & 0x3F)));
    }
    
    return result;
}


uint16_t utf8_to_unicode(const vector<uint8_t>& utf8) {
    if (utf8.empty()) return 0;
    
    if (utf8[0] <= 0x7F) {
        return utf8[0];
    }
    else if ((utf8[0] & 0xE0) == 0xC0 && utf8.size() >= 2) {
        return ((utf8[0] & 0x1F) << 6) | (utf8[1] & 0x3F);
    }
    else if ((utf8[0] & 0xF0) == 0xE0 && utf8.size() >= 3) {
        return ((utf8[0] & 0x0F) << 12) | ((utf8[1] & 0x3F) << 6) | (utf8[2] & 0x3F);
    }
    
    return 0;
}


vector<uint8_t> cp1251_to_utf8(const vector<uint8_t>& input) {
    vector<uint8_t> output;
    
    for (uint8_t c : input) {
        if (c < 0x80) {
            output.push_back(c);
        } else {
            uint16_t unicode = cp1251_to_unicode[c - 0x80];
            vector<uint8_t> utf8 = unicode_to_utf8(unicode);
            output.insert(output.end(), utf8.begin(), utf8.end());
        }
    }
    
    return output;
}


vector<uint8_t> utf8_to_cp1251(const vector<uint8_t>& input) {
    vector<uint8_t> output;
    vector<uint8_t> current_utf8;
    
    for (uint8_t c : input) {
        if ((c & 0xC0) != 0x80) {
            if (!current_utf8.empty()) {
                uint16_t unicode = utf8_to_unicode(current_utf8);
                
              
                bool found = false;
                for (int i = 0; i < 128; ++i) {
                    if (cp1251_to_unicode[i] == unicode) {
                        output.push_back(static_cast<uint8_t>(i + 0x80));
                        found = true;
                        break;
                    }
                }
                
                if (!found && unicode <= 0x7F) {
                    output.push_back(static_cast<uint8_t>(unicode));
                }
                else if (!found) {
                    output.push_back('?');
                }
            }
            current_utf8.clear();
        }
        current_utf8.push_back(c);
    }
    
   
    if (!current_utf8.empty()) {
        uint16_t unicode = utf8_to_unicode(current_utf8);
        bool found = false;
        for (int i = 0; i < 128; ++i) {
            if (cp1251_to_unicode[i] == unicode) {
                output.push_back(static_cast<uint8_t>(i + 0x80));
                found = true;
                break;
            }
        }
        if (!found && unicode <= 0x7F) {
            output.push_back(static_cast<uint8_t>(unicode));
        }
        else if (!found) {
            output.push_back('?');
        }
    }
    
    return output;
}

int main() {
    try {
        string input_file, output_file;
        int input_encoding, output_encoding;
        
      
        cout << "Введите имя исходного файла: ";
        cin >> input_file;
        
        cout << "Введите имя выходного файла: ";
        cin >> output_file;
        
        cout << "Выберите кодировку исходного файла (1 - CP1251, 2 - UTF-8): ";
        cin >> input_encoding;
        
        cout << "Выберите кодировку выходного файла (1 - CP1251, 2 - UTF-8): ";
        cin >> output_encoding;
        
     
        if (input_encoding < 1 || input_encoding > 2 || output_encoding < 1 || output_encoding > 2) {
            throw runtime_error("Неверный выбор кодировки. Допустимые значения: 1 или 2");
        }
        
     
        ifstream in_file(input_file, ios::binary);
        if (!in_file) {
            throw runtime_error("Не удалось открыть исходный файл");
        }
        
        vector<uint8_t> input_data((istreambuf_iterator<char>(in_file)), istreambuf_iterator<char>());
        in_file.close();
        
        vector<uint8_t> output_data;
        
        
        if (input_encoding == 1 && output_encoding == 2) {
            output_data = cp1251_to_utf8(input_data);
        }
        else if (input_encoding == 2 && output_encoding == 1) {
            output_data = utf8_to_cp1251(input_data);
        }
        else {
         
            output_data = input_data;
        }
        
  
        ofstream out_file(output_file, ios::binary);
        if (!out_file) {
            throw runtime_error("Не удалось создать выходной файл");
        }
        
        out_file.write(reinterpret_cast<const char*>(output_data.data()), output_data.size());
        out_file.close();
        
        cout << "Перекодировка завершена успешно!" << endl;
        
    } catch (const exception& e) {
        cerr << "Ошибка: " << e.what() << endl;
        return 1;
    }
    
    return 0;
}
